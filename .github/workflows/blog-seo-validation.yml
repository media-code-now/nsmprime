name: Blog Post SEO Validation

on:
  pull_request:
    paths:
      - '*.html'
      - 'blog/**'
      - 'content/**'
      - '**.md'
  push:
    branches: [main, develop]
    paths:
      - '*.html'
      - 'blog/**'
      - 'content/**'

jobs:
  validate-blog-seo:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install jsdom axios
        
    - name: Find changed HTML files
      id: changed-files
      uses: tj-actions/changed-files@v39
      with:
        files: |
          *.html
          blog/**/*.html
          content/**/*.html
          
    - name: Validate Blog Posts
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "Validating changed blog posts..."
        failed_files=""
        critical_failures=0
        
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo "Validating: $file"
          
          # Extract primary keyword from filename or meta tags
          primary_keyword=$(grep -o 'name="keywords"[^>]*content="[^"]*"' "$file" | sed 's/.*content="\([^"]*\)".*/\1/' | cut -d',' -f1 || echo "digital marketing")
          
          # Run validation
          if node blog-seo-validator.js "$file" "$primary_keyword"; then
            echo "‚úÖ $file passed validation"
          else
            exit_code=$?
            echo "‚ùå $file failed validation (exit code: $exit_code)"
            failed_files="$failed_files $file"
            
            if [ $exit_code -eq 1 ]; then
              critical_failures=$((critical_failures + 1))
            fi
          fi
          
          echo "---"
        done
        
        # Summary
        if [ ! -z "$failed_files" ]; then
          echo "::error::Blog post validation failed for:$failed_files"
          echo "Failed files: $failed_files" >> $GITHUB_STEP_SUMMARY
          echo "Critical failures: $critical_failures" >> $GITHUB_STEP_SUMMARY
          
          if [ $critical_failures -gt 0 ]; then
            echo "::error::$critical_failures critical SEO issues found. Please fix before merging."
            exit 1
          else
            echo "::warning::Non-critical SEO issues found. Consider addressing before merging."
            exit 0
          fi
        else
          echo "‚úÖ All blog posts passed SEO validation" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Generate SEO Report
      if: always() && steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "# SEO Validation Report" > seo-report.md
        echo "Generated: $(date)" >> seo-report.md
        echo "" >> seo-report.md
        
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo "## $file" >> seo-report.md
          
          primary_keyword=$(grep -o 'name="keywords"[^>]*content="[^"]*"' "$file" | sed 's/.*content="\([^"]*\)".*/\1/' | cut -d',' -f1 || echo "digital marketing")
          
          # Generate detailed report
          node -e "
            const BlogSEOValidator = require('./blog-seo-validator.js');
            const validator = new BlogSEOValidator('$file');
            validator.runAllTests({
              primaryKeyword: '$primary_keyword',
              semanticKeywords: ['SEO', 'digital marketing', 'content marketing']
            }).then(results => {
              console.log('Score: ' + results.summary.score + '/100');
              console.log('Passed: ' + results.summary.passed + '/' + results.summary.total);
              if (results.summary.critical_failed > 0) {
                console.log('‚ùå Critical Issues: ' + results.summary.critical_failed);
              }
            }).catch(e => console.log('Error: ' + e.message));
          " >> seo-report.md
          
          echo "" >> seo-report.md
        done
        
    - name: Comment PR with SEO Report
      if: github.event_name == 'pull_request' && steps.changed-files.outputs.any_changed == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('seo-report.md')) {
            const report = fs.readFileSync('seo-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üîç Blog Post SEO Validation Report\n\n${report}\n\n---\n*This report was automatically generated by the SEO validation workflow.*`
            });
          }
          
  performance-audit:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Find changed HTML files
      id: changed-files
      uses: tj-actions/changed-files@v39
      with:
        files: '*.html'
        
    - name: Run Lighthouse Performance Audit
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "Running Lighthouse audit on changed files..."
        
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo "Auditing: $file"
          
          # Simple local server for testing
          python3 -m http.server 8080 &
          server_pid=$!
          sleep 2
          
          # Run Lighthouse
          lhci autorun --config='{
            "ci": {
              "collect": {
                "url": ["http://localhost:8080/'$file'"],
                "numberOfRuns": 1
              },
              "assert": {
                "assertions": {
                  "categories:performance": ["error", {"minScore": 0.75}],
                  "categories:accessibility": ["error", {"minScore": 0.90}],
                  "categories:seo": ["error", {"minScore": 0.90}]
                }
              }
            }
          }' || echo "Lighthouse audit completed with warnings"
          
          kill $server_pid
        done